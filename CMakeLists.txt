cmake_minimum_required (VERSION 3.12)
project (acarsdec C)

add_compile_options(-Ofast)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")

include(CMakeDependentOption)

add_executable(acarsdec acars.c  acarsdec.c  label.c  msk.c  output.c netout.c fileout.c lib.c statsd.c)
execute_process(COMMAND git describe --tags --always --dirty OUTPUT_VARIABLE VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
add_compile_definitions(VERSION="${VERSION}")

find_package(PkgConfig)
if(NOT PKG_CONFIG_FOUND)
message ( FATAL_ERROR "pkg-config NOT FOUND")
endif()

option(CJSON "Enable CJSON support" ON)
cmake_dependent_option(MQTT "Enable MQTT support" ON CJSON OFF)

if(CJSON)
	set(WITH_CJSON NO)
	pkg_check_modules(LIBCJSON libcjson)
	if(LIBCJSON_FOUND)
		add_definitions(-DHAVE_CJSON )
		target_link_libraries(acarsdec ${LIBCJSON_LIBRARIES})
		target_include_directories(acarsdec PUBLIC ${LIBCJSON_INCLUDE_DIRS})
		target_link_directories(acarsdec PUBLIC ${LIBCJSON_LIBRARY_DIRS})
		set(WITH_CJSON YES)

		if(MQTT)
			SET(WITH_MQTT NO)
			find_library(PAHOMQTT paho-mqtt3a)
			if(PAHOMQTT)
				add_definitions(-DWITH_MQTT )
				target_sources( acarsdec PRIVATE mqttout.c)
				find_path(PAHOMQTT_INCPATH MQTTAsync.h)
				target_include_directories(acarsdec PUBLIC ${PAHOMQTT_INCPATH})
				target_link_libraries(acarsdec ${PAHOMQTT})
				SET(WITH_MQTT YES)
			endif()
		else()
			SET(WITH_MQTT DISABLED)
		endif()
		message ( STATUS "Using paho-mqtt3a: ${WITH_MQTT}")
	endif()
else()
	set(WITH_CJSON DISABLED)
endif()


option(ALSA "Enable ALSA support" ON)

if(ALSA)
	SET(WITH_ALSA NO)
	pkg_check_modules(LIBASOUND alsa)
	if(LIBASOUND_FOUND)
		add_definitions(-DWITH_ALSA )
		target_sources( acarsdec PRIVATE alsa.c)
		target_link_libraries(acarsdec ${LIBASOUND_LIBRARIES})
		target_include_directories(acarsdec PUBLIC ${LIBASOUND_INCLUDE_DIRS})
		target_link_directories(acarsdec PUBLIC ${LIBASOUND_LIBRARY_DIRS})
		SET(WITH_ALSA YES)
	endif()
else()
	SET(WITH_ALSA DISABLED)
endif()
message ( STATUS "Using alsa: ${WITH_ALSA}")

option(LIBACARS "Enable libacars support" ON)

if(LIBACARS)
	SET(WITH_LIBACARS NO)
	pkg_check_modules(LIBACARS libacars-2>=2.0.0)
	if(LIBACARS_FOUND)
		add_definitions(-DHAVE_LIBACARS )
		target_link_libraries(acarsdec ${LIBACARS_LIBRARIES})
		target_include_directories(acarsdec PUBLIC ${LIBACARS_INCLUDE_DIRS})
		target_link_directories(acarsdec PUBLIC ${LIBACARS_LIBRARY_DIRS})
		SET(WITH_LIBACARS YES)
	endif()
else()
	SET(WITH_LIBACARS DISABLED)
endif()
message ( STATUS "Using libacars: ${WITH_LIBACARS}")

option(SNDFILE "Enable libsndfile support" ON)

if(SNDFILE)
	SET(WITH_SNDFILE NO)
	find_library(LIBSNDFILE sndfile)
	if(LIBSNDFILE)
		add_definitions(-DWITH_SNDFILE )
		target_sources( acarsdec PRIVATE soundfile.c)
		find_path(LIBSNDFILE_INCPATH sndfile.h)
		target_include_directories(acarsdec PUBLIC ${LIBSNDFILE_INCPATH})
		target_link_libraries(acarsdec ${LIBSNDFILE})
		SET(WITH_SNDFILE YES)
	endif()
else()
	SET(WITH_SNDFILE DISABLED)
endif()
message ( STATUS "Using libsndfile: ${WITH_SNDFILE}")

option(RTLSDR "Enable RTL-SDR support" ON)

if(RTLSDR)
	SET(WITH_RTL NO)
	find_library(LIBRTL rtlsdr)
	if(LIBRTL)
		add_definitions(-DWITH_RTL )
		target_sources( acarsdec PRIVATE rtl.c)
		target_link_libraries( acarsdec ${LIBRTL})
		SET(WITH_RTL YES)
	endif()
else()
	SET(WITH_RTL DISABLED)
endif()
message ( STATUS "Using librtlsdr: ${WITH_RTL}")

option(AIRSPY "Enable AirspySDR support" ON)

if(AIRSPY)
	SET(WITH_AIR NO)
	find_library(LIBAIR airspy)
	if(LIBAIR)
		add_definitions(-DWITH_AIR )
		target_sources( acarsdec PRIVATE air.c)
		target_link_libraries( acarsdec ${LIBAIR})
		SET(WITH_AIR YES)
	endif()
else()
	SET(WITH_AIR DISABLED)
endif()
message ( STATUS "Using libairspy: ${WITH_AIR}")

option(SDRPLAY "Enable SDRplay support via API version 2" ON)

if(SDRPLAY)
	SET(WITH_SDRPLAY NO)
	find_library(LIBPLAY mirsdrapi-rsp)
	if(LIBPLAY)
		add_definitions(-DWITH_SDRPLAY )
		target_sources( acarsdec PRIVATE sdrplay.c)
		target_link_libraries( acarsdec ${LIBPLAY})
		SET(WITH_SDRPLAY YES)
	endif()
else()
	SET(WITH_SDRPLAY DISABLED)
endif()
message ( STATUS "Using libmirsdrapi-rsp: ${WITH_SDRPLAY}")

option(SOAPYSDR "Enable SoapySDR support" ON)

if(SOAPYSDR)
	SET(WITH_SOAPY NO)
	find_library(LIBSOAPY SoapySDR)
	if(LIBSOAPY)
		add_definitions(-DWITH_SOAPY )
		target_sources( acarsdec PRIVATE soapy.c)
		target_link_libraries( acarsdec ${LIBSOAPY})
		SET(WITH_SOAPY YES)
	endif()
else()
	SET(WITH_SOAPY DISABLED)
endif()
message ( STATUS "Using libSoapySDR: ${WITH_SOAPY}")

target_link_libraries( acarsdec pthread m )

install(TARGETS acarsdec
	RUNTIME DESTINATION bin
)
